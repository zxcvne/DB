DB - day02

mysqluser로 접속

DDL
- CREATE
  생성되는 개체에 따라 생성 방법이 다름

- DROP
drop 삭제될개체 개체명;

- ALTER
  이미 생성된 개체의 요소를 수정할 때 사용

추가 - add
삭제 - drop
수정 - modify, change

- 테이블 명 변경 => rename

alter table 테이블명 rename 변경테이블명;

alter table koreait rename korea;

num(int, ai, pk)
name
phone
address
age(default 20)

create table test(
num int auto_increment,
name varchar(20), 
phone varchar(15),
address varchar(50),
age int default 20,
primary key(num)
);

alter table test modify name varchar(10) not null;

-- 데이터 추가하기
/*not null 은 데이터를 insert할때 반드시 넣어줘야 됨*/
문자 : '', ""  
INSERT INTO ~ VALUES

insert into 테이블명(칼럼명, 칼럼명,...) 
values(값, 값,...);

- 모든 데이터 채우기
insert into 테이블명
values(값, 값,...);

- 데이터 확인
selec * from test;

insert into test(name) values('홍길동');

insert into test(name, phone, address, age) 
values('이순신', 010-1111-1111', seoul', 22);

insert into test(name, phone, address) 
values('kim', '010-1111-2222', 'seoul');

insert into test(name, phone, age)
values('강감찬', '010-2222-2222', 30);

insert into test(name, phone, age)
values('제임스 고슬링', '010-3333-2233', 70);

----------------------------------------------------
korea 테이블에 데이터 5개 추가
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(20) | NO   |     | NULL    |                |
| tel   | varchar(15) | YES  |     | NULL    |                |
| addr  | varchar(50) | YES  |     | NULL    |                |

insert into korea(id,name,tel) values(1,"김",'010-1111-1111');
insert into korea(id,name,tel) values(2,"강",'010-1111-1112');
insert into korea(id,name,tel) values(3,"박",'010-1111-1113');
insert into korea(id,name,tel) values(4,"최",'010-1111-1114');
insert into korea(id,name,tel) values(5,"이",'010-1111-1115');

---------------------------------------------------------
데이터 삭제
/*전체 삭제*/
delete from 테이블명;
/*선택 삭제*/
delete from 테이블명;
where 조건;

delete from korea
where id = 5;
---------------------------------------------------------
데이터 수정
update ~ set ~ where
update 테이블명
set 변경칼럼 = 값
where 조건;00

insert into korea(name,tel) values("박영이",'010-1111-1116');
/*address가 null 인 박영이의 주소를 추가하기*/

update korea
set addr = '서울';

update korea
set addr = '경기'
where id = 6;

* id = 2, id =4 주소를 수원으로 변경

update korea
set addr = '수원'
where id = 2 or id = 4;

= : 같다
!= : 같지 않다
<> : 같지 않다

/*자주 쓰는 명령어*/
select, update, insert 

---------------------------------------
-- student 테이블 생성하기
table => student
num int pk, nn
name nn
age default 20
address
major
score 

* student 테 

* 학생 5명 추가하기
insert into student 
values
(1, '홍', 22, '서울', '컴퓨터', 98),
(2, '박', 25, '수원', '영어', 73),
(3, '김', 26, '서울', '영어', 93),
(4, '이', 21, '수원', '컴퓨터', 68),
(5, '최', 29, '서울', '국어', 88);

------------------------------------------
student 변경
/* 0, null 차이 0은 연산가능 null은 연산 불가능*/
score default 0 넣기

alter table student modify score int default 0;

insert into student (num, name, age, address, major)
values
(6, '짱구', 22, '인천', '컴퓨터'),
(7, '철수', 25, '수원', '영어'),
(8, '훈이', 26, '용인', '영어'),
(9, '맹구', 21, '안산', '컴퓨터'),
(10, '유리', 29, '양구', '국어');

insert into student (num, name, age, address, major, score)
values
(11, '짱아', 22, '인천', '컴퓨터', null);

----------------------------------------------------
SELECT - 조회
select  컬럼명
from 테이블명
where 조건식
group by 그룹 컬럼명
having 그룹의 조건
order by 정렬할 컬럼명
limit 0, 5 => 0번지부터 5개만 출력 0 생략시 처음부터

like '김%' /*김으로 시작하는 */\

------------------------------------------------------

>= (이상)
<= (이하)
> (초과)
< (미만)
!= (같지 않다)
<> (같지 않다)

--------------------------------------------------------

[문제 1]
컴퓨터 학과의 학생 검색

select * from student
where major = '컴퓨터';

select num, name, major from student
where major = '컴퓨터';

[문제 2]
나이가 22살 이상의 학생 검색

select * from student
where age >= 22;

[문제 3]
점수가 80점 이상인 학생을 출력
select * from student
where score >= 80;

[문제 4]
주소가 서울시인 학생만 출력
select * from student
where address = '서울';

[문제 5]
점수가 60점 미만인 학생 출력
select * from student
where score <  60;

--------------------------------------------------------
별칭 (alias) => as 키워드

칼럼명, 테이블명, 조건명, 쿼리
이름을 붙이는 역할

as 키워드는 생략 가능

sql 은 대소문자구분을 안함. 띄어쓰기 안됨
띄어쓰기 대신 _ 사용

점수가 90점 이상인 학생명

select 컬럼명 as(생략가능) 별칭 from 테이블명 as(생략가능) 별칭 
where score >= 90;

select name 성적우수자 from student 
where score >= 90;

select name 성적우수자 from student s
where s.score >= 90;

--------------------------------------------------------
distinct : 중복제거
/*distinct 작성시 하나의 컬럼만 작성*/

- 학과 리스트 출력
select distinct major as 학과 from student;

- 주소 리스트 출력
select distinct address as 주소 from student;

-----------------------------------------------------------
비교 연산자
>= (이상)
<= (이하)
> (초과)
< (미만)
= (같다)
!=, <> (같지 않다)

산술연산자
+, - , *, / (나머지 연산자는 없음.)
산술연산을 할 경우 값이 null이면 연산 불가 -> null

논리연산자
and or not 

() : 우선순위

++, += : 축약 연산자는 안됨.

-----------------------------------------------------------

1] 나이가 22살 이상이고 수원에 사는 학생을 출력
select * from student
where age >= 22 and address = '수원';

2] 점수가 60점 이상인 학생 중 컴퓨터 학과의 학생만 출력
select name from student
where score >= 60 and major ='컴퓨터';

3] 수원과 서울에 사는 학생만 출력
- or연산
select * from student
where address = '수원' or address = '서울';

- in연산
in(값, 값, 값)
select * from student
where address in('서울', '수원');

4] 점수가 70점 ~ 90점 사이인 학생만 출력
select * from student
where score between 70 and 90;

5] 점수가 0이 아닌 학생만 출력
select * from student
where score <> 0;

-----------------------------------------------------------
select * from student;

홍 , 철수 나이를 null로 바꾸기

update student
set
age = null
where
num in(1, 7);

나이가 null인 값을 출력
- null은 알 수 없는 값이기 때문에 비교가 안됨.
- is null, is not null

select * from student
where age is null;


- like => 값을 포함하는 값으로 검색
- 이로 끝나는 이름 검색

select * from student
where name like '%이';

select * from student
where name like '%이' and score <= 60;

- 모든 학생의 나이를 1 증가
update student
set age = age + 1;

select * from test;

------------------------
test 테이블에서 실행

1. score 칼럼을 추가
숫자, 기본값 0으로 설정
alter table test add score int default 0;

2. score 값을 채우기 0 ~ 100점으로 채우기
update test 
set score = 50;

update test 
set score = 65
where num in(3,5);

3. num = 1, num= 4 address를 suwon으로 변경
update test 
set address = 'suwon'
where num in(1,4);

4. address가 null 인 학생명만 검색
select name from test
where address is null;

5. 주소 리스트 출력 (중복값 제거)
select distinct address from test;

6. 주소가 null 인 학생 삭제
delete from test
where address is null;

Query OK = 실제 요소의 값이 바뀜
select는 쿼리가 변하지 않음

-----------------------------------------
student 테이블에서

정렬 order  by
- 성적이 높은 순으로 정렬

select * from student
order by score desc;

점수가 같다면 이름 순을 오름차순

select * from student
order by score desc, name asc;

-----------------------------------------
집약함수 : 열의 데이터의 합계, 평균 개수
등의 집계값을 구하기 위한 함수

- count : 검색된 행의 개수
- sum : 합계
- avg : 평균
- max : 최대값
- min : 최소값

group by : 데이터를 특정 기준으로 묶음
having : 그룹의 조건

select 검색컬럼 from 테이블명
where 조건 
group by 그룹칼럼명
having 그룹의 조건 /*having은 그룹의 조건이기 때문에 그룹이 없으면 필요없음*/
order by 정렬 칼럼명
limit 번지, 개수;

- 실 동작 순서
1. from : 조회 테이블 확인
2. where : 조건을 확인(조건에 맞는 값으로 축소)
3. group by : 칼럼의 그룹화 (그룹 후 값을 축소)
4. having : 그룹의 조건 확인 (조건에 맞는 값으로 축소)
5. select : 필요한 열만 추출
6. order by : 추출된 열만 정렬
7. limit : 필요한 값만 자름

----------------------------------------------------
select count(num) as 인원수 from student;

- 각 학과별 인원 수
select major, count(num) as '학과별 인원수' from student
group by major;

- 학과별 점수 합계
select major, sum(score) as '학과별 점수 합계' from student
group by major;

- 학과별 인원수, 점수합계, 점수평균, 최고값, 최저값
select major as 학과
, count(num) as 인원수
, sum(score) as 합계
, avg(score) as 평균
, max(score) as 최대
, min(score) as 최소
from student
group by major;

- age의 개수와 합계

select count(age), sum(age), avg(age)
from student;

집계함수에 null 값이 포함되어 있으면 null은 빼고 계산

- 학과별 인원수, 점수합계, 점수평균, 최고값, 최저값
0 점은 제외하고 계산

select major,
sum(score),
avg(score),
max(score),
min(score)
from student
where score <> 0
group by major
order by major;

- 지역별 인원수

select address 지역,
count(num) as 인원수
from student
group by address
order by address;

----------------------------------
test1 테이블 생성
id (pk, ai) / name nn / age 18세 이상만 / address

default not null pk ai 
check
age int check(age >= 18)

// 0~100

score int check(score>=0 and score <= 100)

create table test1(
id int auto_increment primary key,
name varchar(20) not null,
age int check(age >= 18) default 20,
address varchar(50)
CONSTRAINT `test1_chk_1` CHECK ((`age` >= 18))
);

insert into test1(name, age, address) values ('kim', 15, 'seoul');

constraint 제약 조건

/* 테이블 생성할때 넣은 제약 조건 확인 */
show create table test1;

- 테이블 생성 후 나중에 추가 가능
alter table test1 add constraint 
test1_chk_2 check(age>=18)

- 기본키 추가
alter table 테이블명 add constraint
제약조건명 primary key(칼럼명);

- constraint 제약 조건명은 생략 가능;

insert 5명 추가

insert into test1
(name, age, address) 
values
('세종대왕', 25, 'seoul'),
('이순신', 24, 'seoul'),
('안중근', 27, 'seoul'),
('정약용', 25, 'seoul');

- check 삭제
alter table test1 drop check test1_chk_1;
- check 추가
alter table test1 add check(age >= 18);
(나중에 제약조건을 추가시 조건에 맞지 않는 값이 있다면 error)

------------------------------------------------------
test1 score 칼럼 추가
check(0~100) default 0

score를 추가 (updata)

alter table test1 
add score int default 0 
check(score >= 0 and score <= 100);

update test1
set score = 100;
where id = 1;

update test1
set score = 81
where id = 2;

update test1
set score = 74
where id = 3;

update test1
set score = 90
where id = 4;

update test1
set score = 92
where id = 5;

update test1
set address = '수원'
where id in(1,3,4);

update test1
set address = '서울'
where id in(2,5);

----------------------------------------------

1. 지역별 나이 합계
select address as 지역,
sum(age) as 합계
from test1
group by address;

2. 점수가 가장 큰 학생의 이름과 점수를 출력
select name, score
from test1
order by score desc
limit 1;

3. 지역별 점수의 합계와 평균 출력
select address 지역,
sum(score) 합계,
avg(score) 평균
from test1
group by address;

4. 지역이 서울인 학생의 점수 합계
select address 지역,
sum(score) 합계
from test1
where address = '서울'
group by address;

select address, sum(score) from test1
group by address
having address = '서울';



